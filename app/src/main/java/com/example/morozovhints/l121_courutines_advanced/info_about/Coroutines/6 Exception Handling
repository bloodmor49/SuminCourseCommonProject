
///////////////////////////// 6 Exception Handling /////////////////////////////////

Исключения.
При работе в коде корутин с исключениями их нужно обрабатывать. Если этого не делать,
то приложение упадет. Try catch самой корутины не прокатит, если ошибка в корутине.
Можно обернуть сам метод, который вызывает ошибку внутри корутины в трай кетч.

В нашем случае обратимся к Exception Handler-у. Обработчик исключений.
Async или Launch - разница есть. Лаунч крашит приложение, а вот асинх - не совсем.
Однако при вызове Async исключение сохраняется в deffered (вывод).
Таким образом оно хранится в выводе и не ломает остальные корутины данного скоупа.
Если мы захотим каким - либо образом работать после с асинхом с ошибкой, то она положит приложение.
Если асинк внутри лаунча, и в асинх деф выдает исключение, то лаунчер упадет вместое со скоупом.
Так что тут нужно действовать по принципу ниже.


///////////////////////////// Общий принцип работы /////////////////////////////////

1. Создаем его.

    private val exceptionHandler = CoroutineExceptionHandler { _, throwable ->
        Log.i(LOG_TAG, "exception catched: $throwable")
    }

2. Прикрепляем его к билдеру:

private val corutineScope = CoroutineScope(Dispatchers.Main + parentJob + exceptionHandler)

Если дальше ничего не делать, то другие дочерние корутины передают отцу по правилу 5 ошибку и всё
отрубается, все корутины в рамках скоупа перестают работать.
