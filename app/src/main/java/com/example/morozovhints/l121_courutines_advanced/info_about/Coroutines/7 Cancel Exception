
///////////////////////////// 7 Cancel Exception /////////////////////////////////

Потоки нельзя останавливать через метод Cancel без проверки на isActive.
Это опасно - операцию можно прервать при своем выполнении.
Например при записи базы нельзя отключать её иначе данные будут повреждены.
Правильно использовать interrupt - меняет флаг (inActive = true), а не останавливает поток.

У job есть метод invokeOnCompletion - если отменена корутина.

CancellationException позволяет урпавлять отменой корутин и не нужно их обрабатывать.

///////////////////////////// Общий принцип работы /////////////////////////////////

1. Создаем наш скоуп с какой то работой. Например таймером.

        val jobCounter = viewModelScope.launch(Dispatchers.Default) {
            Log.i(LOG_TAG, "Started")
            var counter = 0
            val before = System.currentTimeMillis()
            for (i in 0..100_000_000) {
                for (j in 0..100) {

2. А здесь мы проверяем по флагу. Если активно, то каунтер идет вверх. А если нет, то бросается
особая ошибка для корутин.

                    if (isActive) counter++
                    else throw CancellationException() }}}

       *** ПОд капотом у Котлина это все сделано и можно тупо заменить на:
       ensuredActive. Делает тоже самое.

3. Это метод, который сработает, если job был отменен.

        jobCounter.invokeOnCompletion {
            Log.i(LOG_TAG, "Coroutine cancelled: $it")
        }

4. Этот метод бросает остановку Job счетчика выше.

        viewModelScope.launch {
            delay(3000)
            jobCounter.cancel()
        }