
///////////////////////////// 5. Coroutines basics /////////////////////////////////

Корутины - современный метод работы с асинхронными процессами для котлина.
Все проблемы прошлых методов про старые потоки, callback hell и т.д. были учтены.
Принцип работы заключается в suspend (прерываемых) функциях (только для корутин)
Они не должны блокировать главный поток, например:.

Thread.sleep(5000) -> delay(5000) - thread блокирует главный поток. delay - нет.

 1)lifecycleScope.launch - запускаем Scope - область, где запросы будут делаться. Его жизненный
 цикл аналогичен активити. Т.е. после onDestroy activity сломается и Scope.
 2) Чтобы главный поток не был заблокирован, пока выполняется запрос, но при этом была задержка
 мы используем suspend - приостановка метода и delay - задержка.
 Иными словами - идет пускаем общую функцию, она приостанавливается и пускает другую функцию,
 которая тоже приостанавливается и пускает третью функцию. А потом все они помирают.

 Корутины должны входить в состав объектов с ЖЦ. Т.е. в scope. Мы можем создать свой scope:

 private val scope = CoroutineScope(Dispatchers.Main)

     сorutine context показывает где это происходит.
     Dispatchers - где выполняются корутины. какой поток.
      Main - главный поток.
      IO - поток для чтения и записи.
      Default - сложные вычисления потоки макс производительности как исходя из числа ядер.

///////////////////////////// Общий принцип работы /////////////////////////////////

1. Асинхронные функции делаем suspend (Прерываемые). Загрузка города:
    private suspend fun loadCityByCourutines(): String {
        delay(5000)
        return "Королев"}

2. Тоже самое с погодой:

  private suspend fun loadWeatherByCourutines(city: String): String {
        Toast.makeText(this, "Загрузка погоды...$city", Toast.LENGTH_LONG).show()
        delay(5000)
        return "Дождь"}

3. И для функции, которая вызывает это всё:

    private suspend fun loadDataByCourutines() {
        viewBinding.progressBarOfDownloading.isVisible = true
        viewBinding.btnDownload.isEnabled = false
        val city = loadCityByCourutines()

        viewBinding.tvCitySet.text = city
        val weather = loadWeatherByCourutines(city)

        viewBinding.tvWeatherSet.text = weather
        viewBinding.progressBarOfDownloading.isVisible = false
        viewBinding.btnDownload.isEnabled = true
    }

4. Запускаем методы внутри Scope. Scope имеет жизн. цикл.

               private val scope = CoroutineScope(Dispatchers.Main)
               scope.launch {loadDataByCourutines()}
                                или
               lifecycleScope.launch {loadDataByCourutines()}

    ///////////////////////////// Под капотом как работает /////////////////////////////////

    Под капотом корутины работают примерно следующим образом.
    Код делится на условные шаги. По выполнению каждого шага вызывается функция со следующим шагом
    как на примере when. В самих асинхронных функциях используются потоки и коллбэки.:

    private fun loadDataWithoutCourutines(step: Int = 0, obj: Any? = null) {

            //по шагам блоков кода. Похожее поведение, как корутины, но подробно как это работает.
            //Используется state машина с конструкцией when. В функции delay вообще используется postdelay.

            when (step) {
                0 -> { viewBinding.progressBarOfDownloading.isVisible = true
                    viewBinding.btnDownload.isEnabled = false
                    loadCityWithoutCourutines {
                        loadDataWithoutCourutines(step = 1, it)}}
                1 -> { val city = obj as String
                    viewBinding.tvCitySet.text = city
                    loadWeatherWithoutCourutines(city) {
                        loadDataWithoutCourutines(step = 2, it)}}
                2 -> { val weather = obj as String
                    viewBinding.tvWeatherSet.text = weather
                    viewBinding.progressBarOfDownloading.isVisible = false
                    viewBinding.btnDownload.isEnabled = true }}}

        private fun loadCityWithoutCourutines(callback: (String) -> Unit) {
            thread {
                Thread.sleep(5000)
                runOnUiThread {
                    callback.invoke("Королев")}}}

        private fun loadWeatherWithoutCourutines(city: String, callback: (String) -> Unit) {
            thread {
                runOnUiThread {
                    Toast.makeText(context, "Загрузка погоды...$city", Toast.LENGTH_LONG).show()}
                Thread.sleep(5000)
                runOnUiThread { callback.invoke("Дождь")}}}

