
///////////////////////////// 2. Classic service /////////////////////////////////

Обычный сервис.

Наследуется от Services. Должен быть зарегистрирован в манифесте.
Жизненный цикл - OnCreate, OnStartCommand, OnDestroy.
Cуществует в фоновом потоке приложения, однако код внутри onStartCommand реализуется в главном потоке.
Сервисы работают через намерения.

onStartCommand возвращает следующие значения:
1) return START_STICKY - если система убьет сервис, то он будет пересоздан, но интент будет null
2) return START_NOT_STICKY - если система убьюет сервис, то он НЕ будет пересоздан.
3) return START_REDELIVER_INTENT - как START_STICKY, но интент БУДЕт доставлен в онстарткомманд.

 Многие приложения ДО Версии апи 26 не нужно было уведомлять пользователя о работе сервиса.
 Однако это могло приводить к тому, что программа выполняла в сервисе в фоне
 непонятно какие задачи, незаметно от пользователя.
 После 26 версии необходимо уведомлять пользователя, иначе после onDestroy сервис не
 будет перезапущен. Для этог используется ForeGround Service (несмахиваемое уведомление).

  Проблемы обычных сервисов (симпл,foreground):
 1) они работают (onStartCommand) !!в главном потоке!!, поэтому нужны асинхронные процессы.
 2) остановка вручную (stopSelf,stopService)
 3) при запуске несколько раз будет куча сервисов параллельно. (нужно контроллировать вручную)
 Решение - IntentService. Он устарел, но в нем решены все эти три проблемы.

//////////////////////////////////Как работать (простейший пример)?/////////////////////////////

1. Создаем наш сервис:
class MyService : Service() и переопределяем основные методы.

1.1 Переопределяем метод onBind:



2. Переопределяем метод его работы:
    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
            val start = intent?.getIntExtra(EXTRA_START, 0) ?: 0
            coroutineScope.launch {
                for (i in start..start + 100) {
                    delay(1000)
                    log("Timer: $i")
                }
                //Останов сервиса изнутри.
                stopSelf()
            }
            return START_STICKY

3. Вызов сервисов идет через намерения, как и новых активити, поэтому создаем намерение.
Можем передать что - нибудь.

       companion object {
           private const val EXTRA_START = "start"
           fun newIntent(context: Context, start: Int): Intent {
               return Intent(context, MyService::class.java).apply {
                   putExtra(EXTRA_START, start)}} }


4. Далее в самой активити вызываем этот сервис и останавливаем из активити:

        viewbinding.simpleService.setOnClickListener {
            startService(MyService.newIntent(this,25))}

//      Останов сервиса СНАРУЖИ.

        viewbinding.simpleService.setOnLongClickListener {stopService(MyService.newIntent(this,0))}