
///////////////////////////// 2. URI Matcher /////////////////////////////////

Например в приложении можем отправить любой запрос. Если в нём autorities (com.example.morozovhints)
будет совпадать с этим значением, то запрос будет выполняться.
Как узнать что запрос корректный и какой он? Это всё хранится в URI.
URI Matcher - определяет это всё и позволяет обрабатывать запросы, которые приходят в провайдер.
Т.е. в зависимости от запроса возвращать код (404).

В матчер можно класть сколько угодно запросов.

///////////////////////////// Общий принцип работы /////////////////////////////////

1. В провайдере создаем матчер:
    private val uriMatcher = UriMatcher(UriMatcher.NO_MATCH)

2. Далее добавляем URI (т.е. данные с которыми будем работать):

 private val uriMatcher = UriMatcher(UriMatcher.NO_MATCH).apply {
        addURI("com.example.morozovhints","shopItems#",GET_SHOP_ITEMS_QUERY)
    }

Здесь GET_SHOP_ITEMS_QUERY - код данного запроса, который нужно вернуть. В данном случае 100.

3. Теперь в какой - то момент будет вызван метод Query. Туда прийдет URI. Этот URI мы можем
передать матчеру и получить код ответа:

обработчик. Если uri одинаков, то будет че то делать.
val code = uriMatcher.match(uri)
        when (code) {
            GET_SHOP_ITEMS_QUERY -> {}}

Если авторити и таблица совпадают, то будет 100. Если нет, то будет -1.

Короче говоря провайдер проверяет запрос с возможностью нами обрабатывать.

Если в таблице нужно обрабатывать значения, то можно не писать shopitems/значение1,2,3, а просто
Для INT: shopitems/#
Для строки: shopitems/*


