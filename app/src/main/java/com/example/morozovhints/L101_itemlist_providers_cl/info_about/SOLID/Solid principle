
///////////////////////////// SOLID /////////////////////////////////

Объектно-ориентированное программирование - основы проектирования приложений.
При создании программных систем использование принципов SOLID способствует созданию такой системы,
которую будет легко поддерживать и расширять в течение долгого времени[3].
Принципы SOLID — это руководства, которые также могут применяться во время работы над существующим
программным обеспечением для его улучшения.

Существуют следующие принципы:

///////////////////////////// S - single responsibility principle /////////////////////////////////

                             Принцип единственной ответственности

Для каждого класса должно быть определено единственное назначение.
Все ресурсы, необходимые для его осуществления, должны быть инкапсулированы в этот класс и подчинены
только этой задаче. Не должно быть GOD объектов. 1 класс / модуль = 1 задача.

На практике используется в UseCase бизнес логики.

///////////////////////////// O - open-closed principle /////////////////////////////////

                                Принцип открытости/закрытости

«Программные сущности должны быть открыты для расширения, но закрыты для модификации».

У нас в коде должно быть что - то открыто и закрыто - программные сущности (классы, модули и тд).

Закрыты для модификаций:

Пусть мы создали класс, который работает после тестов. Багов в нем нет. Другие это подтвердили.
Другие разработчики используют класс в своих модулях. Вдруг другой разработчик решил поменять что - то
в этом классе для своей работы. На других пользователях это ТАКЖЕ отобразилось, так как код поменялся.
Теперь нужно тестировать весь код заного.

Поэтому нужно запретить изменять сущность (класс будем называть).

Открыты дря расширения:

Например системные библиотеки котлина закрыты для изменений, а нам нужен класс с новой функциональносью.
Таким образом мы можем создать свой класс, который будет наследником системного класса.
Там мы можем добавить новый метод, который нам нужен. При этом оригинал остается неизменным.

Итог - у нас есть наша новая функция, другие разработчики тоже довольны, так как их функция не поменялась.

В основном это нужно для библиотек. На практике например нам нужно поменять или добавить логику в
репозиторий работы с данными. Если нужно поменять поведение репозитория, то мы просто добавляем новый
интерфейс, который будет реализовывать то же самый интерфейс.

///////////////////////////// L - Liskov substitution principle /////////////////////////////////

Принцип подстановки Лисков. Названа в честь Барбары Лисков.

«объекты в программе должны быть заменяемыми на экземпляры их подтипов без
изменения правильности выполнения программы».

Принцип описывает как строить систему с наследованием. Когда их нужно создавать, а когда - нет.
Если мы в системе заменим одного наследника другим, то в этом случае поведение программы не должно
измениться. Если после этого программа не работает, то данный класс не является наследником.

Если мы создаем иерархию наследования, то должны убедиться принципу подстановки. Т.е. если мы
пишем тесты на родительский класс, то они ДОЛЖНЫ проходить независимо от того, какого передали
наследника.

///////////////////////////// I - interface segregation principle /////////////////////////////////

                                Принцип разделения интерфейса

«много интерфейсов, специально предназначенных для клиентов, лучше,
чем один интерфейс общего назначения».

Пусть у нас есть editText и нам нужно назначить на него слушатель.
У этого слушателя переопределяется анонимный класс, у которого есть несколько oveeride fun.
Нам нужна только одна такая функция, в то время как остальные не используются.

!!!Это есть прямое нарушение interface segregation!!!!

Интерфейсы нужно разделять на более мелкие, чтобы система не зависела от ниспользуемых методов.
Нежелательно иметь один общий полупустой интерфейс.

Поэтому правильнее будет создать самим один нужный метод и переопределить только его.

///////////////////////////// D - dependency inversion principle /////////////////////////////////

                                Принцип инверсии зависимостей

«Зависимость на Абстракциях. Нет зависимости на что-то конкретное».

Любую систему нужно строить так, чтобы зависимости были от абстракций, а не от конкретной реализации.

В приложении UseCase зависят от репозиториев, а точнее их интерфейсов с реализацией в дата слое.
Если бы не было интерфейса репозитория, то все usecase бы зависили напрямую от дата слоя.
Тогда presentation зависит от domain, domain от data, data от domain - код жестко связан.
Domain становится зависимым.

В правильном случае usecase зависит от интерфейса, то есть от абстракции. Эта абстракция в домене, а
реализация в дата слое. Таким образом домен не зависит от дата. Это дает больше возможностей.




